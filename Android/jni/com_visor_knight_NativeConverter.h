/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_visor_knight_NativeConverter */

#ifndef _Included_com_visor_knight_NativeConverter
#define _Included_com_visor_knight_NativeConverter
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_visor_knight_NativeConverter
 * Method:    nativeProcessing
 * Signature: ([BIILjava/nio/IntBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_visor_knight_NativeConverter_nativeProcessing
  (JNIEnv *, jobject, jbyteArray, jint, jint, jobject);

/*
 * Class:     com_visor_knight_NativeConverter
 * Method:    setThresholdManually
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_visor_knight_NativeConverter_setThresholdManually
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_visor_knight_NativeConverter
 * Method:    setColorSelected
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_visor_knight_NativeConverter_setColorSelected
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_visor_knight_NativeConverter
 * Method:    setMedianFiltering
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_com_visor_knight_NativeConverter_setMedianFiltering
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_visor_knight_NativeConverter
 * Method:    grayscaleOnly
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_com_visor_knight_NativeConverter_grayscaleOnly
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_visor_knight_NativeConverter
 * Method:    automaticThresholding
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_com_visor_knight_NativeConverter_automaticThresholding
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_visor_knight_NativeConverter
 * Method:    logarithmicTransform
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_com_visor_knight_NativeConverter_logarithmicTransform
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_visor_knight_NativeConverter
 * Method:    setSoftEdges
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_com_visor_knight_NativeConverter_setSoftEdges
  (JNIEnv *, jobject, jboolean);

#ifdef __cplusplus
}
#endif
#endif
